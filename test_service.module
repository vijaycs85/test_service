<?php
/*
 * @file
 *
 *
 */


define('TEST_SERVICE_RUNNING', 1);
define('TEST_SERVICE_FAILING', 2);
define('TEST_SERVICE_RELOAD', 3);
define('TEST_SERVICE_CHECKING', 6);

/*
 * Implements hook_menu
 */

function test_service_menu() {
  $items = array();
  $items['test-service/form'] = array(
    'title' => 'Address services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('test_service_form'),
    'access arguments' => array('access content'),
  );
  $items['test-service/record-activity'] = array(
    'title' => 'Record activity service',
    'page callback' => 'test_service_record_activity',
    'access arguments' => array('access content'),
  );
  $items['test-service/disrupted-trains'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_disrupted_trains',
    'access arguments' => array('access content'),
  );
  $items['test-service/test'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_test',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-train-schedule/%/%/%'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_get_train_schedule',
    'access arguments' => array('access content'),
  );
  $items['test-service/test-simpletest'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_test_simpletest',
    'access arguments' => array('access content'),
    'file' => 'test_service.test.inc',
  );
  $items['test-service/finalize-forced-refund'] = array(
    'title' => 'PSP finalize refund services',
    'page callback' => 'test_service_finalize_forced_refund',
    'access arguments' => array('access content'),
  );
  $items['test-service/finalize-refund'] = array(
    'title' => 'PSP finalize refund services',
    'page callback' => 'test_service_finalize_refund',
    'access arguments' => array('access content'),
  );
  $items['test-service/psp-refund'] = array(
    'title' => 'PSP refund services',
    'page callback' => 'test_service_psp_refund',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-hotel-availability'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_get_hotel_availability',
    'access arguments' => array('access content'),
  );
  $items['test-service/create-lite-customer'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_create_lite_customer',
    'access arguments' => array('access content'),
  );
  $items['test-service/generate-pah'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_generate_pah',
    'access arguments' => array('access content'),
  );
  $items['test-service/find-address'] = array(
    'title' => 'Address services',
    'page callback' => 'test_service_find_address',
    'access arguments' => array('access content'),
  );
  $items['test-service/finalize-refund'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_finalize_refund',
    'access arguments' => array('access content'),
  );
  $items['test-service/refund-proposal'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_refund_proposal',
    'access arguments' => array('access content'),
  );

  $items['test-service/load-travel'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_load_travel',
    'access arguments' => array('access content'),
  );
  $items['test-service/retrieve-customer'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_retrieve_customer',
    'access arguments' => array('access content'),
  );
  $items['test-service/checkout'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_checkout',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-passenger'] = array(
    'title' => 'Testing services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('test_service_get_passenger'),
    'access arguments' => array('access content'),
  );
  $items['test-service/get-list-od'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_get_od_pair',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-booking-horizon'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_get_booking_horizon',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-list-credit-card-fees'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_get_list_credit_card_fees',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-booking-quotation'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_get_booking_quotation',
    'access arguments' => array('access content'),
  );

  $items['test-service/cancel-reservation'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_cancel_reservation',
    'access arguments' => array('access content'),
  );
  $items['test-service/make-reservation'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_make_reservation',
    'access arguments' => array('access content'),
  );

  $items['test-service/exchange-outbound'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_exchange_outbound',
    'access arguments' => array('access content'),
  );
  $items['test-service/exchange-inbound'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_exchange_inbound',
    'access arguments' => array('access content'),
  );
  $items['test-service/valiate-proposal'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_validate_proposal',
    'access arguments' => array('access content'),
  );
  $items['test-service/authorize-card'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_authorize_card',
    'access arguments' => array('access content'),
  );
  $items['test-service/authorize-card-cc-token'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_authorize_card_cc_token',
    'access arguments' => array('access content'),
  );
  $items['test-service/modify-passenger-data'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_modify_passenger_data',
    'access arguments' => array('access content'),
  );
  $items['test-service/finalize-exchange'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_finalize_exchange',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-booking-quotation-by-period'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_get_booking_quotation_by_period',
    'access arguments' => array('access content'),
  );
  $items['test-service/manage-user'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_manage_user',
    'access arguments' => array('access content'),
  );
  $items['test-service/get-hotel-rule-rates'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_get_hotel_rate_rules',
    'access arguments' => array('access content'),
  );

  $items['admin/structure/test-service/%/status'] = array(
    'title' => 'Status',
    'description' => 'Javascript status call back.',
    'page callback' => 'test_service_status',
    'page arguments' => array(3),
    'load arguments' => array(3, TRUE),
  // 'access callback' => 'user_access',
  // 'access arguments' => array('administer services'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'test_service.admin.inc',
  );
  $items['admin/structure/test-service'] = array(
    'title' => 'Services status check',
    'description' => 'Manage services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('test_service_admin_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'test_service.admin.inc',
  );
  $items['admin/structure/test-service/manage'] = array(
    'title' => 'Manage',
    'description' => 'Monitor services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('test_service_admin_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'test_service.admin.inc',
  );
  foreach ($items as $path => $item) {
    if (!isset($item['access callback'])) {
      $items[$path]['access callback'] = 'user_access';
      // $items[$path]['access arguments'] = array('manage services');
      $items[$path]['access arguments'] = array('access content');
    }
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function test_service_theme() {
  $items = array();
  $base = array(
    'path' => drupal_get_path('module', 'test_service'),
    'file' => 'test_service.theme.inc',
  );
  $items['test_service_form_package'] = array(
    'render element' => 'form',
  ) + $base;
  $items['test_service_storage_link'] = array(
    'variables' => array('storage' => null, 'text' => null, 'path' => null, 'options' => array()),
  ) + $base;

  return $items;
}

function test_service_get_od_pair() {
  return origin_destination_begin_import();
  $service = GetListOd::create();
  $service->stub = TRUE;
  $service->invoke();
  $parser = $service->getProcessor();
  // $parser->loadXmlFile($service->getFile(drupal_realpath(file_default_scheme() . '://')));
  $parser->loadXml($service->getData());
  $version = $parser->getVersion();
  while ($od = $parser->next()){
    $item = new OdReferenceData($od);
    print_r($item);
  }exit;
}

function test_service_get_booking_horizon() {
  // $booking_horizon = origin_destination_get_booking_horizon_data();
  $service = GetListBookingHorizon::create();
  $service->stub = TRUE;
  $service->invoke();
  $parser = $service->getProcessor();
  // $parser->loadXmlFile($service->getFile(drupal_realpath(file_default_scheme() . '://')));
  $parser->loadXml($service->getData());
  $status = 0;
  foreach ($parser as $item){
    $horizon = new HorizonReferenceData($item);
    $query = db_update('origin_destination');
    $query->fields(array('booking_horizon' => $horizon->num_days));
    $query->condition('origin_code', $horizon->origin_code);
    $query->condition('destination_code', $horizon->destination_code);
    if ($status !== NULL) {
      $query->condition('status', $status);
    }
    $query->execute();
  }
echo 'done';exit;
}

function test_service_get_list_credit_card_fees() {
  $fees = itinerary_get_credit_card_fees();print_r($fees->getFees());exit;
  if ($fees->getFees()) {
    $fees_details = $fees->getFees();
    $cards = implode(', ', array_keys($fees_details['charges']));
    return array(
      'status' => 1,
      'message' => t('Retrieved surcharges for  %cards card(s) successfully!!!', array('%cards' => $cards)),
    );
  }
  return test_service_get_default();
}
function test_service_get_booking_quotation() {
  $origin_destination = entity_load('origin_destination', FALSE, array('origin_code' => 'GBLON', 'destination_code' => 'FRPAR'));
  if (empty($origin_destination)) {
    watchdog('test_service', t('Error while testing %origin to %destination', array('%origin' => 'GBLON', '%destination' => 'FRPAR',)));
  }
  $origin_destination = array_pop($origin_destination);
  $search_criteria = array(
    'origin_destination' => $origin_destination,
    'depart' => strtotime('+2 days 6 am'),
    'adult' => '2',
    'senior' => '1',
    'youth' => '0',
    'child' => '0',
    'return' => strtotime('+5 days 11 am'),
  );
  $train_search = new TrainSearch($search_criteria['origin_destination'], $search_criteria['depart'], $search_criteria['adult'], $search_criteria['senior'], $search_criteria['youth'], $search_criteria['child'], $search_criteria['return']);
  $outward_proposals = $train_search->getProposalsForDay(Journey::$TYPE_OUTWARD);
  if (!empty($outward_proposals)) {
    return array(
      'status' => 1,
      'message' => t('Retrieved %journey_type proposals successfully!!!', array('%journey_type' => Journey::$TYPE_OUTWARD)),
    );
  }
  return test_service_get_default();
}
function test_service_cancel_reservation(){
  $service =  messagequeue_service_load('cancel_reservation');
  $result = $service->invoke(array('pnrReference' => 'ABCDEF'));
  //print_r($result);exit;
  // Check status and set return value.
  if ($result['status']) {
    $return = $result['data'];
  }
  //return train_tickets_get_credit_card_fee();
}

function test_service_make_reservation(){
  $service =  messagequeue_service_load('make_reservation');
  //TODO: build $context->storage
  $result = $service->invoke($data);
  // Check status and set return value.
  if ($result['status']) {
    $return = $result['data'];
  }
  //return train_tickets_get_credit_card_fee();
}

function test_service_exchange_outbound() {
  $passengers = array(
  array('first_name' => 'F1', 'last_name' => 'L1', 'passenger_id' => 1),
  array('first_name' => 'F2', 'last_name' => 'L2', 'passenger_id' => 2),
  );
  //$id, $type, $origin_code, $destination_code, DateTime $departure_date, DateTime $arrival_date, $duration, TrainTicketProductWrapper $ticket = NULL, Price $price = NULL
  $od = array(
    'origin_code' => 'GBSPX',
    'destination_code' => 'FRPNO'
    );
    $travel = LoadTravel::create();
    $travel->pnr = 'TKPLPB';
    $travel->stub = 1;
    $travel->invoke();
    print_r($travel->isFlexible());exit;

    $service =  GetExchangeProposal::create();
    $service->departure_date = $travel->getDepartureTimestamp();
    $service->return_date = $travel->getArrivalTimestamp();
    $service->origin_code = $travel->getOrigin();
    $service->destination_code = $travel->getDestination();
    $service->pnr_reference = 'TKPLPB';
    foreach ($passengers as $passenger) {
      $service->addPassenger($passenger['passenger_id'], $passenger['first_name'], $passenger['last_name']);
    }
    // $origin_destination = entity_load('origin_destination', FALSE, array('origin_code' => '7015400', 'destination_code' => '8727100'));
    // $od = array_pop($origin_destination);
    // $service->setOD($od);
    $service->setOldDepartureDateFromTimestamp($travel->getDepartureTimestamp());
    //$service->setJourneyId(1);

    $service->setDepartureDateFromTimestamp(time() + 20000);
    $service->setReturnDateFromTimestamp(time() + 40000);

    $service->invoke();
    //$service->getPp
    exit;
}

function test_service_exchange_inbound() {
  $passengers = array(
  array('first_name' => 'F1', 'last_name' => 'L1', 'passenger_id' => 1),
  array('first_name' => 'F2', 'last_name' => 'L2', 'passenger_id' => 2),
  );
  $od = array(
    'originCode' => 'GBSPX',
    'destinationCode' => 'FRPNO',
  );
  $service =  GetExchangeProposal::create();
  $service->setPnrReference('ABCDEF');
  foreach ($passengers as $passenger) {
    $service->addPassenger($passenger['passenger_id'], $passenger['first_name'], $passenger['last_name']);
  }
  $origin_destination = entity_load('origin_destination', FALSE, array('origin_code' => '7015400', 'destination_code' => '8727100'));
  $od = array_pop($origin_destination);
  $service->setOD($od);
  $service->setOperationType(1);
  $service->setJourneyId(1);
  $service->journey_type = 'Inward';
  $service->setDepartureDateFromTimestamp(time() + 10000);
  $service->setReturnDateFromTimestamp(time() + 20000);
  $service->invoke();
}

function test_service_validate_proposal() {
  /*
   $start = time() + 10001;
   $end = time() + 20000;
   $segment_details['segment_data'] = array(
   array(
   'endDate' => date('d/m/Y', $end),
   'endTime' => date('H:i', $end),
   'startDate' => date('d/m/Y', $start),
   'startTime' => date('H:i', $start),
   'segmentId' => 1,
   'trainNumber' => '9000',
   'carrierCode' => 1,
   'depart' => $end,
   'arrival' => $start,
   'originCode' => 'GBSPX',
   'destinationCode' => 'FRPNO',
   'marketingTrainNumber' => 5000,
   'marketingCarrierCode' => 1,
   'passengerFare' => array(
   array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>1),
   array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>2),
   )
   )
   );
   $journey_details = array(
   array(
   'originCode' => 'GBSPX',
   'destinationCode' => 'FRPNO',
   'depart' => $end,
   'arrival' => $start,
   'journeyId' => 1,
   ),
   );
   $params = array(
   'pnrReference' => 'AAAAAA',
   'passengers' => array(
   array('firstName' => 'F1', 'lastName' => 'L1', 'passengerId' => 1),
   array('firstName' => 'F2', 'lastName' => 'L2', 'passengerId' => 2),
   ),
   'inboundDateTime' => time()+ 1000,
   'outboundDateTime' => time(),
   'depart' => time() + 10001,
   'arrival' => time() + 10000,
   'from' => 'GBSPX',
   'to' => 'FRPNO',
   'inbound' => $segment_details,
   'outbound' => $segment_details,
   'journeyDetails' => $journey_details,
   );
   */
  $service =  ValidateProposal::create();
  $service->pnr_reference = 'TPWJOD';
  //$id, $type, $origin_code, $destination_code, DateTime $departure_date, DateTime $arrival_date, $duration, TrainTicketProductWrapper $ticket = NULL, Price $price = NULL) {
  $departure_date = new DateTime();
  $departure_date->setTimeStamp(strtotime('10/05/2012 06:24:00'));
  $arrival_date = new DateTime();
  $arrival_date->setTimeStamp(strtotime('10/05/2012 13:25:00'));
  $origin_code = 7054660;
  $destination_code = 8775100;
  $journey = new Journey(1, Journey::$TYPE_OUTWARD, $origin_code, $destination_code, $departure_date, $arrival_date, 7*60+1);
  //$id, $type, $title, $first_name, $last_name, $age, $wheel_chair = FALSE, $companion = FALSE, $carriage_number = NULL, $seat_number = NULL, $meal_code = NULL, Price $price = NULL) {
  $passengers[] = new Passenger('1.1', Passenger::$TYPE_ADULT, 'Mr', 'JOHN', 'BOSCO', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('2.1', Passenger::$TYPE_ADULT, 'Mrs', 'ROSE', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('3.1', Passenger::$TYPE_ADULT, 'Mr', 'YOUTH', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  //($id, $type, $origin_code, $destination_code, DateTime $origin_code, DateTime $arrival_date, $duration, CarrierEntityWrapper $carrier)
  $segments[] = new Segment(1, Journey::$TYPE_OUTWARD, $origin_code, $destination_code, $departure_date, $arrival_date, 150);
  $segments[] = new Segment(2, Journey::$TYPE_OUTWARD, $origin_code, $destination_code, $departure_date, $arrival_date, 150);

  // Passenger $passenger, $passenger_type_code, $class_of_service, $fare_code, $seat_preference_code = NULL, $toc_fare_code = NULL, $toc_fare_description = NULL
  $passenger = new Passenger('1.1', Passenger::$TYPE_ADULT, 'Mr', 'JOHN', 'BOSCO', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passenger_fares[] = new PassengerFare($passenger, 'PT00AD', 'BF', 'BFBASB');
  $passenger_fares[] = new PassengerFare($passenger, 'PT00AD', 'BF', 'BFBASB');

  $service->addSelectedJourney(Journey::$TYPE_OUTWARD, $segments, $passenger_fares);
  $service->addSelectedJourney(Journey::$TYPE_INWARD, $segments, $passenger_fares);

  $service->addJourney($journey);
  foreach ($passengers as $passenger) {
    $service->addPassenger($passenger);
  }


  $result = $service->invoke($params);
  //print_r($result);exit;
}

function test_service_authorize_card() {

  $params = array(
  // @todo purchase_desc needs to be figured out how it will be assembled.
          'purchase_desc' => 'Ticket purchase', //$payment['description'],
          'currency' => 'GBP', //$payment['amount']['currency_code'],
          'amount' => '125', //commerce_currency_amount_to_decimal($payment['amount']['amount'], $payment['amount']['currency_code']),
          'card' => array(
            'street_address1' => 'Address 1',
            'street_address2' => NULL,
            'postcode' => 'AB1 2CD',
            'issue_number' => NULL,
            'start_date' => NULL,
            'expiry_date' => '08/12',
            'pan' => '1000171234567896',
            'cv2' => '123',
  ),
  );

  $service =  messagequeue_service_load('authorize_card');
  $service->setHeaders(array('authorizeRetryCount' => 1));
  $result = $service->invoke($params);
  //print_r($result);exit;
}

function test_service_authorize_card_cc_token() {

  $params = array(
  // @todo purchase_desc needs to be figured out how it will be assembled.
          'purchase_desc' => 'Ticket purchase', //$payment['description'],
          'currency' => 'GBP', //$payment['amount']['currency_code'],
          'amount' => '125', //commerce_currency_amount_to_decimal($payment['amount']['amount'], $payment['amount']['currency_code']),
          'rateId' => '3900900010002469',
          'action' => 'opt_in',
          'card' => array(
            'street_address1' => 'Address 1',
            'street_address2' => NULL,
            'postcode' => 'AB1 2CD',
            'issue_number' => NULL,
            'start_date' => NULL,
            'expiry_date' => '08/12',
            'pan' => 'FACBE350B7FB506E56E21524679FB07BEB83C157',
            'cv2' => '123',
  ),

  );

  $service =  messagequeue_service_load('authorize_card_cc_token');
  $service->setHeaders(array('authorizeRetryCount' => 1));
  $result = $service->invoke($params);
  //print_r($result);exit;
}

function test_service_modify_passenger_data() {
  $params['train_search']['tickets']['make_reservation']['pnr_reference'] = 'AAAAAA';
  $params['train_search']['tickets']['traveller_details'] = array(
    'ADULT' => array(
  array('first_name' => 'F1', 'last_name' => 'L1', 'passenger_id' => '1', 'membership' => '1001', 'wheelchair' => FALSE, 'title' => 'Mr'),
  array('first_name' => 'F2', 'last_name' => 'L2', 'passenger_id' => '2', 'membership' => '1002', 'wheelchair' => TRUE, 'title' => 'Mr'),
  ),
    'CHILD' => array(
  array('first_name' => 'F3', 'last_name' => 'L3', 'passenger_id' => '3', 'membership' => '1003', 'wheelchair' => FALSE, 'title' => 'Mr'),
  array('first_name' => 'F4', 'last_name' => 'L4', 'passenger_id' => '4', 'membership' => '1004', 'wheelchair' => TRUE, 'title' => 'Mr'),
  ),
  );

  $service =  messagequeue_service_load('modify_passenger_data');
  // $service->stub = TRUE;
  $result = $service->invoke($params);
  //print_r($result);exit;
}
function test_service_finalize_exchange() {
  $start = time() + 10001;
  $end = time() + 20000;
  $passengers = array(
    'ADULT' => array(
  array('first_name' => 'F1', 'last_name' => 'L1', 'passenger_id' => '1', 'membership' => '1001', 'wheelchair' => FALSE, 'title' => 'Mr'),
  array('first_name' => 'F2', 'last_name' => 'L2', 'passenger_id' => '2', 'membership' => '1002', 'wheelchair' => TRUE, 'title' => 'Mr'),
  ),
  );
  $segment_details['segment_data'] = array(
  array(
        'endDate' => date('d/m/Y', $end),
        'endTime' => date('H:i', $end),
        'startDate' => date('d/m/Y', $start),
        'startTime' => date('H:i', $start),
        'segmentId' => 1,
        'trainNumber' => '9000',
        'carrierCode' => 1,
        'depart' => $end,
        'arrival' => $start,
        'originCode' => 'GBSPX',
        'destinationCode' => 'FRPNO',
        'marketingTrainNumber' => 5000,
        'marketingCarrierCode' => 1,
        'passengerFare' => array(
  array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>1),
  array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>2),
  )
  )
  );
  $journey_details = array(
      'originCode' => 'GBSPX',
      'destinationCode' => 'FRPNO',
      'depart' => $end,
      'arrival' => $start,
      'journeyId' => 1,
  );
  $params = array(
  'pnr_reference' => 'AAAAAA',
  'passengers' => array(
  array('firstName' => 'F1', 'lastName' => 'L1', 'passengerId' => 1),
  array('firstName' => 'F2', 'lastName' => 'L2', 'passengerId' => 2),
  ),
  'inboundDateTime' => time()+ 1000,
  'outboundDateTime' => time(),
  'depart' => time() + 10001,
  'arrival' => time() + 10000,
  'from' => 'GBSPX',
  'to' => 'FRPNO',
  'inbound' => $segment_details,
  'outbound' => $segment_details, 
  'passengers' => $passengers,
  'journeyDetails' => $journey_details,
    'products' => array (
  array('reference' => 'Product 1', 'type' => 1),
  ),
    'card' => array('amount' =>'120', 'currency'=>'GBP', 'timestamp' =>time()),
    'contact' => array ('emailAddress' => 'test@test.com', 'phoneNumber' => '+44 121 112 1212'),
    'pan' => 1,
  );
  $service =  messagequeue_service_load('finalize_exchange');
  $service->setHeaders(array('operation' => 'exchange'));
  // $service->stub = TRUE;
  $result = $service->invoke($params);
  //print_r($result);exit;


}

function test_service_get_booking_quotation_by_period() {
  $origin_destination = entity_load('origin_destination', FALSE, array('origin_code' => 'GBLON', 'destination_code' => 'FRPAR'));
  if (empty($origin_destination)) {
    watchdog('test_service', t('Error while testing %origin to %destination', array('%origin' => 'GBLON', '%destination' => 'FRPAR',)));
  }
  $origin_destination = array_pop($origin_destination);
  $search_criteria = array(
    'origin_destination' => $origin_destination,
    'depart' => strtotime('+7 days 6 am'),
    'adult' => '2',
    'senior' => '1',
    'youth' => '0',
    'child' => '0',
    'return' => strtotime('+37 days 11 am'),
  );
  $train_search = new TrainSearch($search_criteria['origin_destination'], $search_criteria['depart'], $search_criteria['adult'], $search_criteria['senior'], $search_criteria['youth'], $search_criteria['child'], $search_criteria['return']);

  $start_date = $train_search->getPeriodStartDate();
  $proposals = $train_search->getProposalsForPeriod(Journey::$TYPE_OUTWARD, $start_date);
  if (!empty($proposals)) {
    return array(
      'status' => 1,
      'message' => t('Retrieved %journey_type period proposals successfully!!!', array('%journey_type' => Journey::$TYPE_OUTWARD)),
    );
  }
  return test_service_get_default();
}

function test_service_manage_user() {
  $service =  ManageCustomer::create();// print_r($service);
  $result = $service->addMemberContact('testing28@mail.com', 'I', 'H');
  $service->setDefaults();
  $service->invoke();
  return $service->getCustomerNumber();
}

function test_service_get_hotel_rate_rules() {
  $service =  GetHotelRateRules::create();
  $result = $service->setReservationToken('adsfadsf');
  $result = $service->setGeneralProperties('adsfasdf');
  $service->invoke();
  //return $service->getCustomerNumber();
}

function test_service_get_passenger($form, &$form_state) {
  global $user;
  $account = user_load($user->uid);
  $wrapper = extended_entity_wrapper('user', $account, array(), 'UserEntityWrapper');
  $default_travellers = array('' => Adult1);
  foreach ($wrapper->getAllTravellers() as $id => $traveller) {
    $default_travellers[$id] = $traveller->title . ' ' . $traveller->first_name . ' ' .$traveller->last_name;
  }

  $selected = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : NULL;
  // Get title options from reference data store
  $title_options = array( // @TODO: BR263
  NULL => t('Select'),
    'Mr' => t('Mr'), 
    'Ms' => t('Ms'), 
    'Mrs' => t('Mrs'), 
    'Miss' => t('Miss'),
    'Dr' => t('Dr')
  );
  $form['textfield1'] = array (
    '#type' => 'select',
    '#options' => $default_traveller,
  );

  $form['adult1'] = array (
    '#type' => 'traveller',
    '#title' => 'Adult1'.$selected,
    '#title_options' => $title_options,
  //'#default_travellers' => $default_travellers,
  // '#default_value' => _test_service_dependent_dropdown($selected),
    '#default_value' => array(
        'title' => 'Mr',
        'first_name' => 'dsdd'.$selected,
        'last_name' => 'ssqss'.$selected,
  ),
    '#prefix' => '<div id="dropdown-second-replace">',
    '#suffix' => '</div>',
  );

  $options_first = _ajax_example_get_first_dropdown_options();
  // If we have a value for the first dropdown from $form_state['values'] we use
  // this both as the default value for the first dropdown and also as a
  // parameter to pass to the function that retrieves the options for the
  // second dropdown.

  $form['dropdown_first'] = array (
    '#type' => 'select',
    '#title' => 'Instrument Type',
    '#options' => $default_travellers,
    '#default_value' => $selected,
    '#ajax' => array(
  // When 'event' occurs, Drupal will perform an ajax request in the
  // background. Usually the default value is sufficient (eg. change for
  // select elements), but valid values include any jQuery event,
  // most notably 'mousedown', 'blur', and 'submit'.
  // 'event' => 'change',
      'callback' => 'test_service_dependent_dropdown_callback',
      'wrapper' => 'dropdown-second-replace',
  ),
  );
  $form['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  return $form;
}
function test_service_dependent_dropdown_callback($form, $form_state) {
  return $form['adult1'];
}
function test_service_get_passenger_validate($form, &$form_state) {

}

function test_service_get_passenger_submit($form, &$form_state) {
}
function _test_service_dependent_dropdown($selected) {
  if (empty($selected) && $selected !== 0) {
    return array(
    'title' => 'Mr',
    'first_name' => 'dsdd'.$selected,
    'last_name' => 'ssqss'.$selected,
    );
  }
  global $user;
  $account = user_load($user->uid);
  $wrapper = extended_entity_wrapper('user', $account, array(), 'UserEntityWrapper');
  $passenger = $wrapper->getTravellerById($selected);
  return array(
    'title' => $passenger->title,
    'first_name' => $passenger->first_name,
    'last_name' => $passenger->last_name,
  );
}

function test_service_checkout() {
  $checkout = Checkout::create();
  $checkout->stub = TRUE;
  $contact = array(
    'address_line_1' => 'Address 1',
    'town' => 'London',
    'country_2' => 'Address 1',
    'first_name' => 'John',
    'last_name' => 'Bosco',
    'std_code' => '121',
    'email' => 'asdaf@mail.com',
    'phone' => '7778889999',
    'post_code' => '12121',
    'title' => 'Mr',
  );
  $checkout->setContactDetails($contact);
  $checkout->setCardFee(120);
  $checkout->setPnrReference('ABCDEF');
  $checkout->setDatacashReference('Payment123');
  $checkout->setPromocodeReference('PROMO123');
  $checkout->invoke();
  echo $checkout->bookingEventLinkID();
  echo $checkout->getTransactionState();exit;
}

function test_service_load_travel() {
  $service = LoadTravel::create();
  $service->setPnr('ABCDEF');/*

  // setPassengerInformation($lastname, $email = NULL, $eft_number = NULL, $creditcard_token = NULL)
  $service->setPassengerInformation('LASTNAME', 'me@mail.com', 'eft121212112', 'creditcard121212121');
  $service->setTravelDate(time()+2*24*60);
  $service->history = TRUE;
  $service->eligibility_mod = TRUE;
  $service->invoke();*/
  $service->setPassengerInformation('LASTNAME', 'me@mail.com', 'eft121212112', 'creditcard121212121');
  $passenger = $service->getPassengerInformation();
  return;
}

function test_service_refund_proposal() {
  $service = GetRefundProposal::create();
  $service->pnr_reference = 'UYRIYV';
  //$id, $type, $origin_code, $destination_code, DateTime $departure_date, DateTime $arrival_date, $duration, TrainTicketProductWrapper $ticket = NULL, Price $price = NULL) {
  $departure_date = new DateTime();
  $departure_date->setTimeStamp(strtotime('12/05/2012 08:54:00'));
  $arrival_date = new DateTime();
  $arrival_date->setTimeStamp(strtotime('10/05/2012 13:25:00'));
  $journey = new Journey(1, Journey::$TYPE_OUTWARD, 7054660, 8775100, $departure_date, $arrival_date, 7*60+1);
  //$id, $type, $title, $first_name, $last_name, $age, $wheel_chair = FALSE, $companion = FALSE, $carriage_number = NULL, $seat_number = NULL, $meal_code = NULL, Price $price = NULL) {
  $passengers[] = new Passenger('1.1', Passenger::$TYPE_ADULT, 'Mr', 'JOHN', 'BOSCO', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('2.1', Passenger::$TYPE_ADULT, 'Mrs', 'ROSE', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('3.1', Passenger::$TYPE_ADULT, 'Mr', 'YOUTH', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);

  $service->addJourney($journey);
  foreach ($passengers as $passenger) {
    $service->addPassenger($passenger);
  }
  $service->stub = TRUE;
  // $service->invoke();
  $service->invoke();
}

function test_service_finalize_refund() {
  $service = FinalizeRefund::create();
  $service->pnr_reference = 'TPWJOD';
  //$id, $type, $origin_code, $destination_code, DateTime $departure_date, DateTime $arrival_date, $duration, TrainTicketProductWrapper $ticket = NULL, Price $price = NULL) {
  $departure_date = new DateTime();
  $departure_date->setTimeStamp(strtotime('10/05/2012 06:24:00'));
  $arrival_date = new DateTime();
  $arrival_date->setTimeStamp(strtotime('10/05/2012 13:25:00'));
  $journey = new Journey(1, Journey::$TYPE_OUTWARD, 7054660, 8775100, $departure_date, $arrival_date, 7*60+1);
  //$id, $type, $title, $first_name, $last_name, $age, $wheel_chair = FALSE, $companion = FALSE, $carriage_number = NULL, $seat_number = NULL, $meal_code = NULL, Price $price = NULL) {
  $passengers[] = new Passenger('1.1', Passenger::$TYPE_ADULT, 'Mr', 'JOHN', 'BOSCO', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('2.1', Passenger::$TYPE_ADULT, 'Mrs', 'ROSE', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('3.1', Passenger::$TYPE_ADULT, 'Mr', 'YOUTH', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  // $scheme, $surcharge, $expiry_date, $token = NULL, psp_transaction_id
  $service->addCreditCardTransaction(new CreditCardTransaction('VISA', 0, '08/13', NULL, 'transaction_id'));
  $service->addCreditCardTransaction(new CreditCardTransaction('MASTER', 0, '08/13', NULL, 'transaction_id'));
  // $id, $amount, $currency, $expire, $psp_transaction_id
  $expire = new DateTime();
  $expire->setTimeStamp(strtotime("+2 years"));
  $service->addVoucherTransaction(new VoucherTransaction('VO12', 10.12, 'GBP', $expire, 'transaction_id'));

  $service->addJourney($journey);
  foreach ($passengers as $passenger) {
    $service->addPassenger($passenger);
  }
  $service->invoke();
}

function test_service_finalize_forced_refund() {
  $service = FinalizeForcedRefund::create();
  $service->pnr_reference = 'TPWJOD';
  //$id, $type, $origin_code, $destination_code, DateTime $departure_date, DateTime $arrival_date, $duration, TrainTicketProductWrapper $ticket = NULL, Price $price = NULL) {
  $departure_date = new DateTime();
  $departure_date->setTimeStamp(strtotime('10/05/2012 06:24:00'));
  $arrival_date = new DateTime();
  $arrival_date->setTimeStamp(strtotime('10/05/2012 13:25:00'));
  $journey = new Journey(1, Journey::$TYPE_OUTWARD, 7054660, 8775100, $departure_date, $arrival_date, 7*60+1);
  //$id, $type, $title, $first_name, $last_name, $age, $wheel_chair = FALSE, $companion = FALSE, $carriage_number = NULL, $seat_number = NULL, $meal_code = NULL, Price $price = NULL) {
  $passengers[] = new Passenger('1.1', Passenger::$TYPE_ADULT, 'Mr', 'JOHN', 'BOSCO', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('2.1', Passenger::$TYPE_ADULT, 'Mrs', 'ROSE', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  $passengers[] = new Passenger('3.1', Passenger::$TYPE_ADULT, 'Mr', 'YOUTH', 'JOHN', Passenger::$PASSENGER_AGE[Passenger::$TYPE_ADULT]);
  // $scheme, $surcharge, $expiry_date, $token = NULL, psp_transaction_id
  $service->addCreditCardTransaction(new CreditCardTransaction('VISA', 0, '08/13', NULL, 'transaction_id'));
  $service->addCreditCardTransaction(new CreditCardTransaction('MASTER', 0, '08/13', NULL, 'transaction_id'));
  // $id, $amount, $currency, $expire, $psp_transaction_id
  $expire = new DateTime();
  $expire->setTimeStamp(strtotime("+2 years"));
  $service->addVoucherTransaction(new VoucherTransaction('VO12', 10.12, 'GBP', $expire, 'transaction_id'));

  $service->addJourney($journey);
  foreach ($passengers as $passenger) {
    $service->addPassenger($passenger);
  }
  $service->invoke();
}
function test_service_find_address() {
  $paf_service = AddressFinder::create();
  $paf_service->stub = TRUE;
  $paf_service->propertyDetail = '';
  $paf_service->invoke();
  $address = $paf_service->getAddress();
  if (isset($address)) {
    return array(
        'status' => 1,
        'message' => t('Address service working successfully!!!')
    );
  }
  return test_service_get_default();

}

function test_service_address_finder_form_submit($form, &$form_state) {
  print_r($form_state['values']);exit;
}

function test_service_get_hotel_availability() {
  $hotel_search = test_service_call_get_hotel_availability();
  $hotels = $hotel_search->getHotels();
  list($start_date, $end_date) = explode(',', $hotel_search->getDateRange());
  if(isset($hotels)) {
    $hotel_details = array(
      '%number' => $hotel_search->getHotelCount(),
      '%start_date' => $start_date,
      '%end_date' => $end_date,
      '%city' => $hotel_search->getScope(),
    );
    return array(
      'status' => 1,
      'message' => t('found %number hotel(s) to stay from %start_date to %end_date in %city', $hotel_details),
    );
  }
  return test_service_get_default();
}

function test_service_call_get_hotel_availability(){
  $scope_type = 'City';
  $scope =array('London','London','GB');
  $room_occupancy = array('NumAdults' => 2, 'NumChildren' => array(1), 'NumSeniors' => 1);
  $date_range = array(
    'start' => date('Y-m-d', time()+(2*24*60*60)),
    'end' => date('Y-m-d', time()+(4*24*60*60)),
  );
  $class_of_service = NULL;
  $display_options = array();
  $service_path = 'BP';
  $hotel_name = NULL;
  $hotel_rating = NULL;
  $hotel_amenities = NULL;
  // Load hotel availability object
  $hotel_search = messagequeue_service_load('get_hotel_availability');
  // Set the scope for the search
  $hotel_search->setScope($scope_type, $scope);
  // Set the RoomOccupancy expected is an array('NumAdults' => 1, 'NumChildren' => array(5, 10), 'NumSeniors' => 0)

  $hotel_search->setRoomOccupancy($room_occupancy);
  $hotel_search->setDateRange($date_range['start'], $date_range['end']);
  $hotel_search->setDisplayOptions($display_options);
  if (!is_null($class_of_service)) $hotel_search->setClassOfService($class_of_service);
  // @todo Change to pass service path in AS or BP
  $hotel_search->setServicePath($service_path);
  if (!is_null($hotel_name)) $hotel_search->setNameFilter($hotel_name);
  if (!is_null($hotel_rating)) $hotel_search->setStarRating($hotel_rating);
  if (!is_null($hotel_amenities)) $hotel_search->setAmenities($hotel_amenities);
  $hotel_search->invoke();
  return $hotel_search;
}
function test_service_generate_pah() {

}

function test_service_create_lite_customer() {
  $email = uniqid().'.servic_test@localhost.com';
  if ($iloyal_customer_id = UserEntityWrapper::createLiteAccount($email)) {
    return array(
      'status' => 1,
      'message' => t('lite user created(customer id:@customer_id) with email id: @mail', array('@customer_id' => $iloyal_customer_id,'@mail' => $email)),
    );
  }
  return test_service_get_default();
}

function test_service_retrieve_customer() {
  $email = uniqid().'.servic_test@localhost.com';
  if ($iloyal_customer_id = UserEntityWrapper::createLiteAccount($email)) {
    $user_serivce = RetrieveCustomer::create();
    $user_serivce->customer_number = $iloyal_customer_id;
    $user_serivce->invoke();
    $response_email  =(string) current($user_serivce->getResponse()->xpath('//memberContactInfos/emailAddress'));
    if ($response_email == $email) {
      return array(
        'status' => 1,
        'message' => t('Retrived user details from iLoyal for customer-id:@customer_id', array('@customer_id' => $iloyal_customer_id)),
      );
    }
  }
  return test_service_get_default();
}

function test_service_get_default() {
  return array(
    'status' => 2,
    'message' => t('Caution: Your service is failing without any exception!'),
  );
}

function test_service_psp_refund() {
  $service = PspRefund::create();
  $service->authcode = '820476';
  $service->reference = '4500200040667026';
  $service->stub = TRUE;
  $service->invoke();
  echo $service->getAuthcode();
  echo "<br>";
  echo $service->getDatacashReference();
  echo "<br>";
  echo $service->getMerchantReference();
}

function test_service_test($mid, $message) {
  global $user;
  $service = RaiseRetroClaimRequest::create($user);
  $service->setClaimData();
  $service->invoke();
}

function test_service_record_activity() {
  global $user;
  $account = user_load($user->uid);
  $order = commerce_cart_order_load($user->uid);
  $wrapper = extended_entity_wrapper('user', $account, array(), 'UserEntityWrapper');
  $wrapper->recordActivity($order);
}

/**
 * Create dynamic messages.
 */
function _test_service_test_dynamic_messages() {
  $dm = array(
  array(
      'text' => 'Your tickets are semi-flexible',
      'event' => 'ticket_flexibility_semi',
      'language' => 'uk-EN',
  ),
  array(
      'text' => 'Vos billets sont semi-flexible',
      'event' => 'ticket_flexibility_semi',
      'language' => 'fr-FR',
  ),
  array(
      'text' => 'Your journey between [cancel-origin] and [cancel-desination] is partially refundable. You will be refunded 50% of you purchase price if you cancel.',
      'event' => 'cancel_train_flexibility_semi',
      'language' => 'uk-EN',
  ),
  array(
      'text' => 'Votre voyage entre  [cancel-origin] et [cancel-destination] est partiellement remboursable. Vous serez remboursé 50% d\'entre vous le prix d\'achat si vous annulez.',
      'event' => 'cancel_train_flexibility_semi',
      'language' => 'fr-FR',
  ),
  array(
      'text' => 'Your journey between [cancel-origin] and [cancel-destination] fully refundable. You will see a full refund if you cancel',
      'event' => 'cancel_train_flexibility_full',
      'language' => 'uk-EN',
  ),
  array(
      'text' => 'Votre voyage Entre [cancel-origin]et [cancel-destination] overall remboursable. Vous verrez non Remboursement intéal si Vous annulez',
      'event' => 'cancel_train_flexibility_full',
      'language' => 'fr-FR',
  ),
  );
  $defaults = array(
    'mid' => 0,
    'vid' => 0,
    'language' => 'uk-EN',
    'uid' => 1,
    'revision' => NULL,
    'created' => 0,
    'changed' => 0,
    'log' => NULL,
  );
  foreach ($dm as $message) {
    $lang = 'uk-EN';
    if (isset($message['language'])) {
      $lang = $message['language'];
    }
    $msg = $event = array();
    $msg[$lang][0] = array(
      'value' => $message['text'],
      'format' => 0,
    );
    $event[$lang][0] = array(
      'value' => $message['event'],
      'format' => 0,
    );

    $item = array(
       'cms_dynamic_message' => $msg,
       'cms_dynamic_message_event' => $event,
       'language' => $lang,
       'is_new' => TRUE,
    ) + $defaults;

    $entity = cms_dynamic_messages_save((object)$item);
  }
}

function test_service_form($form, &$from_state) {
  global $user;
  $account = user_load($user->uid);
  $user_wrapper = extended_entity_wrapper('user', $account, array(), 'UserEntityWrapper');
  favourite_traveller_picker_include_js();
  //  module_load_include('inc', 'standard_booking_path', 'includes/standard_booking_path.login_form');
  //$form = standard_booking_path_login_form($form, $from_state);
  module_load_include('inc', 'standard_booking_path', 'includes/standard_booking_path.traveller_details');
  $form['traveler_details']['traveler_details_wrapper']['adults'] = array(
    '#type' => 'item',
  );
  $adults = array(
    new Passenger(1.1, 'First name' ,'Last name'),
    new Passenger(1.2, 'First name' ,'Last name'),
  );
  $title_options = $user_wrapper->getTitlesOptions();
  $favourite_travellers = $user_wrapper->getAllTravellersById();
  $meal_options = array(
    'BSC' => 'Meal 1',
    'BSC2' => 'Meal 2',
  );
  $form['traveler_details']['traveler_details_wrapper']['adults'] += test_service_support_get_element(t('Adult'), $adults, $title_options, $membership_prefix, $meal_options, $defaults, $favourite_travellers, $selected_favorite_traveller, $train_search);
  $form['traveler_details']['traveler_details_wrapper']['adults'] += test_service_support_get_element(t('Adult'), $adults, $title_options, $membership_prefix, $meal_options, $defaults, $favourite_travellers, $selected_favorite_traveller, $train_search);
  $form['#attributes'] = array('class' => array('standard_booking_path_travellers_details_form'));
  // $form += _user_account_management_payment_card_fields(100, $form_state);
  return $form;
}


function test_service_support_get_element($title, $passengers, $title_options = array(), $membership_prefix = '', $meal_options = array(), $values = array(), $favorite_travellers = array(), $favorite_traveller_id = NULL) {
  if (!empty($favorite_travellers)) {
     global $user;
     $account = user_load($user->uid);
     $wrapper = extended_entity_wrapper('user', $account, array(), 'UserEntityWrapper');
     $traveller_options['-1'] = $wrapper->getFullName();

    // Generate Favorite Travellers widget
    foreach($favorite_travellers as $key => $traveller) {
      $traveller_options[$key] = implode(' ', array_filter(array(
          UserEntityWrapper::getTitleName($traveller->title),
          $traveller->first_name,
          $traveller->last_name,
      )));
    }
  }
  

  // Set values if favorite_traveller has been selected
  if ($favorite_traveller_id !== NULL) {
    $values += array(
      'title' => $favorite_travellers[$favorite_traveller_id]->title,
      'first_name' => $favorite_travellers[$favorite_traveller_id]->first_name,
      'last_name' => $favorite_travellers[$favorite_traveller_id]->last_name,
      'meal' => $favorite_travellers[$favorite_traveller_id]->meal,
      'membership' => $favorite_travellers[$favorite_traveller_id]->member_no,
    );
  }

  // Generate fields
  $form = array();  //safety - default return value
  $index = 1;
  foreach($passengers as $passenger) {
    $id = $passenger->id;
    $type = $passenger->type;
    $traveller = str_replace('.', '_', $type . '_' . $id);
    $ages = 30;
    $traveller_ages = $ages[$title . "_" . $index];
    if (!empty($traveller_ages)) {
      $row_title = $title . " " . $index . "(" . $traveller_ages . "years)";
    }
    else {
      $row_title = $title . " " . $index;
    }
    $row_wrapper = 'favourite-traveller-' . $traveller;
    $item = 'favourite-traveller-item-'.$index;
    $form[$item] = array(
      '#type' => 'container',
    );
    
    $form[$item][$traveller] = array(
      '#type' => 'traveller',
      '#title_options' => $title_options,
      '#membership_prefix' => $membership_prefix,
      '#meal_options' => !empty($meal_options)?(array('' => t('Please select')) + $meal_options):NULL,
      '#default_value' => isset($values[$type][$id])?$values[$type][$id]:(isset($values[$type])?$values[$type]:(isset($values)?$values:array())),
      '#required' => TRUE,
      '#prefix' => '<div id="' . $row_wrapper .'">',
      '#suffix' => '</div>',
      '#weight' => $index * 13, //multiplying by 13 to stop elements having the same weight
    );

    if(!empty($favorite_travellers)){
      $form[$item]['_' . $traveller] = array(
        '#type' => 'select',
        '#title' => $row_title,
        '#options' => array('' => $row_title) + $traveller_options,
        '#prefix' => '<div class="favourite-traveller-selector favourite-traveller-'. $index .'">',
        '#suffix' => '</div>',
        '#ajax1' => array(
          'callback' => 'standard_booking_path_travellers_details_type_dropdown_callback',
          'wrapper' => $row_wrapper,
          'method' => 'replace',
          'effect' => 'fade'),
        '#weight' => $index * 13 - 1,
        '#attributes' => array('class' => array('favourite-traveller-picker')),
      );
      
      $form[$item][$traveller]['#title'] = NULL;
    }
    else {
      $form[$item][$traveller]['#title'] = $row_title;
    }

    $index++;
  }

  return $form;
}

function test_service_disrupted_trains() {
  $service = GetListDistruptedTrains::create();
  $service->stub = TRUE;
  $service->invoke();
  $trains = $service->getTrains();
  print_r($trains);exit;  
}